install.packages("Rcpp")
roxygen2::roxygenise()
?dcdens
?Massign::`%<-%`
?pnorm
roxygen2::roxygenise()
roxygen2::roxygenise()
?davidRian
devtools::load_all(".")
devtools::load_all(".")
library(davidRian)
?davidRian
roxygen2::roxygenise()
?davidRian
roxygen2::roxygenise()
?davidRian
roxygen2::roxygenise()
?davidRian
roxygen2::roxygenise()
?davidRian
dnorm
C_dnorm
library(RcppArmadillo)
library(rcpp)
library(Rcpp)
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
dcdens(0, 3, 1, 1, 1:3)
typeof(dcdens(0, 3, 1, 1, 1:3))
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
dcdens_vect(0, 3, 1, 1, 1:3)
dcdens(0, 3, 1, 1, 1:3)
dcdens_vect(0:2, 3, 1, 1, 1:3)
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
dcdens(0, 3, 1, 1, 1:3)
dcdens(0:2, 3, 1, 1, 1:3)
sourceCpp("src/dcdens.cpp")
dcdens <- function(x, k, mean, sd, phi) {
if (missing(k)) stop("You should input k.")
if (length(phi) < k) stop("At least as many phi as k!")
.Call('_davidRian_dcdens', PACKAGE = 'davidRian', x, k, mean, sd, phi)
}
dcdens(0, 3, 1, 1, 1:3)
dcdens <- function(x, k, mean, sd, phi) {
if (missing(k)) stop("You should input k.")
if (length(phi) < k) stop("At least as many phi as k!")
.Call('dcdens', PACKAGE = 'davidRian', x, k, mean, sd, phi)
}
dcdens(0, 3, 1, 1, 1:3)
devtools::load_all(".")
devtools::load_all(".")
dcdens <- function(x, k, mean, sd, phi) {
if (missing(k)) stop("You should input k.")
if (length(phi) < k) stop("At least as many phi as k!")
.Call('dcdens', PACKAGE = 'davidRian', x, k, mean, sd, phi)
}
dcdens(0, 3, 1, 1, 1:3)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
roxygen2::roxygenize()
remove(dcdens)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all(".")
dcdensC
devtools::load_all(".")
require(Rcpp)
source("src/dcdens.cpp")
sourceCpp("src/dcdens.cpp")
# dcpr <- seq(-3,3, by=.1)
# dcp <- sapply(dcpr, dcdens, k=1, thetas=seq(-pi/2, pi/2, by = .01)[22])
# plot(dcpr, dcp)
# plot(dcpr, dnorm(dcpr))
#
set.seed(1)
testd <- c(rnorm(500), rnorm(500, mean=-1))
hello
dcdensC(rnorm(1000), 1, 0, 1, 1
)
devtools::use_testthat()
?optum
?optim
sourceCpp("src/dcdens.cpp")
dcdens(0, 3, 1, 1, 1:3)
dcdensC(rnorm(1000), 1, 0, 1, 1)
dcdensC(rnorm(1000), 1, 0, 1, 1)
dcdensC(rnorm(1000), 1, 0, 1, 1)
dcdensC(rnorm(1000), 1, 0, 1, 1)
dcdensC(rnorm(1000), 1, 0, 1, 1)
devtools::load_all(".")
devtools::load_all(".")
dcdensC
dens
test_ <- function() {print('asd')}
test_
test_()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
dc.LL
dcdensC
dcGrad_
_davidRian_dcGrad
_davidRian_dcGrad_
dcpr <- seq(-3,3, by=.1)
dcp <- sapply(dcpr, dcdens, k=1, thetas=seq(-pi/2, pi/2, by = .01)[22])
dcp <- dcdensC(dcpr, len(phi), 0, 1, phi)
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
phi <- 10
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
require(davidRian)
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
dcdensC()
dcdensC
dcdensC()
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
dcdensC
dcdensC(dcpr)
roxygen2::roxygenize()
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
roxygen2::roxygenize()
devtools::load_all(".")
roxygen2::roxygenize()
devtools::load_all(".")
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
library(davidRian)
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
devtools::load_all(".")
dcdensC()
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
?dcdensC
davidRian:::dcdensC(dcpr, length(phi), 0, 1, phi)
davidRian:::_davidrian_dcdensC(dcpr, length(phi), 0, 1, phi)
dcdensC(dcpr, length(phi), 0, 1, phi)
phi
roxygen2::roxygenize()
roxygen2::roxygenize()
dcdensC(dcpr, length(phi), 0, 1, phi)
devtools::load_all(".")
dcdensC(dcpr, length(phi), 0, 1, phi)
dcdensC
devtools::load_all(".")
dcdensC()
dcdensC(dcpr, length(phi), 0, 1, phi)
dcpr <- seq(-3,3, by=.1)
phi <- 10
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
roxygen2::roxygenize()
dcdensC(dcpr, length(phi), 0, 1, phi)
setwd("~/Documents/PhD/phd-code/testest")
RcppArmadillo.package.skeleton()
RcppArmadillo::RcppArmadillo.package.skeleton()
devtools::load_all("~/Documents/PhD/phd-code/davidRian")
setwd('../davidRian/')
devtools::load_all(".")
devtools::load_all(".")
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
devtools::load_all(".")
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
.Call("dcdensC")
.Call("dcdensC", PACKAGE = 'davidRian')
davidRian:::.__NAMESPACE__.
davidRian:::.__NAMESPACE__.()
davidRian:::.packageName
davidRian:::.__DEVTOOLS__
davidRian:::dcdensC()
davidRian:::dcdensC
compileAttributes()
compileAttributes()
dcdensC()
dcdensC
compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all(".")
dcdensCa()
dcdensCa
.Call('_davidRian_dcdensCa', PACKAGE = 'davidRian')
library(davidRian)
.Call('_davidRian_dcdensCa', PACKAGE = 'davidRian')
devtools::load_all(".")
dcpr <- seq(-3,3, by=.1)
phi <- 10
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
devtools::load_all(".")
dcpr <- seq(-3,3, by=.1)
phi <- 10
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
davidRian::dcdensC()
davidRian::dcdensC
??useDynLib
roxygen2::roxygenise()
devtools::load_all(".")
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
devtools::load_all(".")
dcdensC
devtools::load_all(".")
devtools::load_all(".")
dcdensC(dcpr, length(phi), 0, 1, phi)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
hello
devtools::load_all(".")
devtools::load_all(".")
compileAttributes()
devtools::load_all(".")
devtools::load_all(".")
davidRian:::dcdensC()
davidRian:::dcdensC
.Call(`_davidRian_dcdensC`, PACKAGE = davidRian)
.Call(`_davidRian_dcdensC`, PACKAGE = "davidRian")
devtools::load_all(".")
library(davidRian)
davidRian:::dcdensC
davidRian:::dcdensC()
dcpr <- seq(-3,3, by=.1)
phi <- 10
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
devtools::load_all(".")
devtools::load_all(".")
library(davidRian)
devtools::load_all(".")
devtools::load_all(".")
dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
#
set.seed(1)
thetas <- rnorm(50)
dcGrad_(1, 2, cMat(2, c(.5, .5)), c(.5, .5))
devtools::load_all(".")
dcGrad_(1, 2, cMat(2, c(.5, .5)), c(.5, .5))
ogr <- function(phi, thetas, k, mean, sd) {
dc.LL.grad(thetas, k, mean, sd, phi)
}
#
set.seed(1)
thetas <- rnorm(50)
ogr(c(.1, .1), thetas, 2, 0, 1)
colSums(ogr(c(.1, .1), thetas, 2, 0, 1))
optim(c(5), fn = ofn, thetas = thetas, k = 1, mean = 1, sd = 1, control = list(fnscale = -1))
ofn <- function(phi, thetas, k, mean, sd) {
dc.LL(thetas, k, mean, sd, phi)
}
ogr <- function(phi, thetas, k, mean, sd) {
dc.LL.grad(thetas, k, mean, sd, phi)
}
#
set.seed(1)
thetas <- rnorm(50)
optim(c(5), fn = ofn, thetas = thetas, k = 1, mean = 1, sd = 1, control = list(fnscale = -1))
optim(c(5), fn = ofn, gr = ogr, thetas = thetas, k = 1, mean = 1, sd = 1, control = list(fnscale = -1), method = "BFGS")
devtools::load_all(".")
optim(c(5), fn = ofn, gr = ogr, thetas = thetas, k = 1, mean = 1, sd = 1, control = list(fnscale = -1), method = "BFGS")
devtools::load_all(".")
ofn <- function(phi, thetas, k, mean, sd) {
dc.LL(thetas, k, mean, sd, phi)
}
ogr <- function(phi, thetas, k, mean, sd) {
dc.LL.grad(thetas, k, mean, sd, phi)
}
#
set.seed(1)
thetas <- rnorm(50)
ogr(c(.1, .1), thetas, 2, 0, 1)
optim(c(5), fn = ofn, gr = ogr, thetas = thetas, k = 1, mean = 1, sd = 1, control = list(fnscale = -1), method = "BFGS")
debugonce(ogr)
ogr(c(.1, .1), thetas, 2, 0, 1)
dc.LL.grad(thetas, k, mean, sd, phi)
#
set.seed(1)
thetas <- rnorm(50)
ogr(c(.1, .1), thetas, 2, 0, 1)
optim(c(5), fn = ofn, gr = ogr, thetas = thetas, k = 1, mean = 1, sd = 1, control = list(fnscale = -1), method = "BFGS")
ogr <- function(phi, thetas, k, mean, sd) {
dc.LL.grad(thetas, k, mean, sd, phi)
}
#
set.seed(1)
thetas <- rnorm(50)
ogr(c(.1, .1), thetas, 2, 0, 1)
optim(c(5), fn = ofn, gr = ogr, thetas = thetas, k = 1, mean = 1, sd = 1, control = list(fnscale = -1), method = "BFGS")
debugonce(optim)
optim(c(5), fn = ofn, gr = ogr, thetas = thetas, k = 1, mean = 1, sd = 1, control = list(fnscale = -1), method = "BFGS")
gr
par
gr(par, ...)
...
list(...)
optim(c(.1, .1), fn = ofn, gr = ogr, thetas = thetas, k = 2, mean = 1, sd = 1, control = list(fnscale = -1), method = "BFGS")
optim(c(.1, .1), fn = ofn, gr = ogr, thetas = thetas, k = 2, mean = 1, sd = 1, control = list(fnscale = -1), method = "BFGS")
optim(c(.1, .1), fn = ofn, gr = ogr, thetas = thetas, k = 2, mean = 1, sd = 1, control = list(fnscale = -1), method = "BFGS")
optim(c(.1, .1), fn = ofn, gr = ogr, thetas = thetas, k = 2, mean = 1, sd = 1, control = list(fnscale = -1), method = "BFGS")
optim(c(.1, .1), fn = ofn, gr = ogr, thetas = thetas, k = 2, mean = 0, sd = 1, control = list(fnscale = -1), method = "BFGS")
optim(c(.1, .1), fn = ofn, gr = ogr, thetas = thetas, k = 2, mean = 0, sd = 1, control = list(fnscale = -1), method = "BFGS")
devtools::load_all(".")
#
set.seed(1)
thetas <- rnorm(50)
ogr(c(.1, .1), thetas, 2, 0, 1)
ogr <- function(phi, thetas, k, mean, sd) {
dc.LL.grad(thetas, k, mean, sd, phi)
}
#
set.seed(1)
thetas <- rnorm(50)
ogr(c(.1, .1), thetas, 2, 0, 1)
ogr(c(.1, .1), thetas, 2, 0, 1)
log(ogr(c(.1, .1), thetas, 2, 0, 1))
ogr(c(.1, .1), thetas, 2, 0, 1)
colSums(ogr(c(.1, .1), thetas, 2, 0, 1))
?optim
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
grr <- function(x) { ## Gradient of 'fr'
x1 <- x[1]
x2 <- x[2]
c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),
200 *      (x2 - x1 * x1))
}
(res <- optim(c(-1.2,1), fr, grr, method = "BFGS"))
(res <- optim(c(-1.2,1), fr, grr, method = "BFGS", control = list(trace=6)))
grr(-1.2, )
grr(-1.2, 1)
grr(c(-1.2, 1))
grr(c(1, 1))
optim(c(.1, .1), fn = ofn, gr = ogr, thetas = thetas, k = 2, mean = 0, sd = 1, control = list(fnscale = -1, trace = 6), method = "BFGS")
ofn <- function(phi, thetas, k, mean, sd) {
dc.LL(thetas, k, mean, sd, phi)
}
ogr <- function(phi, thetas, k, mean, sd) {
dc.LL.grad(thetas, k, mean, sd, phi)
}
#
set.seed(1)
thetas <- rnorm(50)
ogr(c(.1, .1), thetas, 2, 0, 1)
optim(c(.1, .1), fn = ofn, gr = ogr, thetas = thetas, k = 2, mean = 0, sd = 1, control = list(fnscale = -1, trace = 6), method = "BFGS")
ogr(c(.1, .1), thetas, 2, 0, 1)
ogr <- function(phi, thetas, k, mean, sd) {
colSums(dc.LL.grad(thetas, k, mean, sd, phi))
}
optim(c(.1, .1), fn = ofn, gr = ogr, thetas = thetas, k = 2, mean = 0, sd = 1, control = list(fnscale = -1, trace = 6), method = "BFGS")
devtools::load_all(".")
ofn <- function(phi, thetas, k, mean, sd) {
dc.LL(thetas, k, mean, sd, phi)
}
ogr <- function(phi, thetas, k, mean, sd) {
colSums(dc.LL.grad(thetas, k, mean, sd, phi))
}
#
set.seed(2)
thetas <- rnorm(50)
ogr(c(.1, .1), thetas, 2, 0, 1)
optim(c(.1, .1), fn = ofn, gr = ogr, thetas = thetas, k = 2, mean = 0, sd = 1, control = list(fnscale = -1, trace = 6), method = "BFGS")
optim(c(.1, .1), fn = ofn, thetas = thetas, k = 2, mean = 0, sd = 1, control = list(fnscale = -1, trace = 6))
optim(c(.1, .1), fn = ofn, thetas = thetas, k = 2, mean = 0, sd = 1, control = list(fnscale = -1, trace = 6))
library(Rcpp)
sourceCpp("src/test.cpp")
res
lapply(res< is.null)
lapply(res, is.null)
any(lapply(res, is.null))
any(apply(res, is.null))
any(sapply(res, is.null))
all(sapply(res, is.null))
all(!sapply(res, is.null))
sapply(res, is.null)
?attr)
?attr
sapply(res, attr, which = "dim")
t(sapply(res, attr, which = "dim") )
colMeans(t(sapply(res, attr, which = "dim") ))
sourceCpp("src/test.cpp")
sourceCpp("src/test.cpp")
res
sourceCpp("src/test.cpp")
sourceCpp("src/test.cpp")
res
sourceCpp("src/test.cpp")
sourceCpp("src/test.cpp")
sourceCpp("src/test.cpp")
res
sourceCpp("src/test.cpp")
res
sourceCpp("src/dcdens.cpp")
res
devtools::load_all(".")
devtools::load_all(".")
#
# ogr <- function(phi, thetas, k, mean, sd) {
#   colSums(dc.LL.grad(thetas, k, mean, sd, phi))
# }
#
# #
set.seed(2)
thetas <- rnorm(100000)
ofn(c(.1, .1), thetas, 2, 0, 1)
# dcpr <- seq(-3,3, by=.1)
# phi <- c()
# dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
# # LL <- dc.LL(dcpr, length(phi), 0, 1, phi)
# # dc.LL.grad(dcpr, length(phi), 0, 1, phi)
# # plot(dcpr, dcp)
#
ofn <- function(phi, thetas, k, mean, sd) {
dc.LL(thetas, k, mean, sd, phi)
}
ofn(c(.1, .1), thetas, 2, 0, 1)
devtools::load_all(".")
#
# ogr <- function(phi, thetas, k, mean, sd) {
#   colSums(dc.LL.grad(thetas, k, mean, sd, phi))
# }
#
# #
set.seed(2)
thetas <- rnorm(100000)
ofn(c(.1, .1), thetas, 2, 0, 1)
optim(c(.1, .1), fn = ofn, thetas = thetas, k = 2, mean = 0, sd = 1, control = list(fnscale = -1, trace = 6))
#
ogr <- function(phi, thetas, k, mean, sd) {
colSums(dc.LL.grad(thetas, k, mean, sd, phi))
}
ogr(c(.1, .1), thetas, 2, 0, 1)
ogr(c(.1, .1), thetas, 2, 0, 1)
rnorm
stats:::C_rnorm
devtools::load_all(".")
library(davidRian)
devtools::load_all(".")
# dcpr <- seq(-3,3, by=.1)
# phi <- c()
# dcp <- dcdensC(dcpr, length(phi), 0, 1, phi)
# # LL <- dc.LL(dcpr, length(phi), 0, 1, phi)
# # dc.LL.grad(dcpr, length(phi), 0, 1, phi)
# # plot(dcpr, dcp)
#
ofn <- function(phi, thetas, k, mean, sd) {
dc.LL(thetas, k, mean, sd, phi)
}
